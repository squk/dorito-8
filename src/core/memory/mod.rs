const RAM_SIZE: usize = 0x1000;
const FONT_INDEX: usize = 0x50;
const FONT_SIZE: usize = 0x50;

pub struct Memory {
    ram: [u8; RAM_SIZE],
}

impl Default for Memory {
    fn default() -> Memory {
        let mut m = Memory { ram: [0; RAM_SIZE] };

        let fontset: [u8; FONT_SIZE] = [
            0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
            0x20, 0x60, 0x20, 0x20, 0x70, // 1
            0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
            0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
            0x90, 0x90, 0xF0, 0x10, 0x10, // 4
            0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
            0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
            0xF0, 0x10, 0x20, 0x40, 0x40, // 7
            0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
            0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
            0xF0, 0x90, 0xF0, 0x90, 0x90, // A
            0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
            0xF0, 0x80, 0x80, 0x80, 0xF0, // C
            0xE0, 0x90, 0x90, 0x90, 0xE0, // D
            0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
            0xF0, 0x80, 0xF0, 0x80, 0x80, // F
        ];

        for n in 0..FONT_SIZE {
            m.ram[FONT_INDEX + n] = fontset[n];
        }

        return m;
    }
}

impl Memory {
    pub fn read_u8(&self, address: u16) -> u8 {
        self.ram[address as usize]
    }

    pub fn read_u16(&self, address: u16) -> u16 {
        let b1: u16 = (self.ram[address as usize] as u16) << 8;
        let b2: u16 = self.ram[(address + 1) as usize] as u16;
        b1 | b2
    }
}
